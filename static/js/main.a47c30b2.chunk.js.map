{"version":3,"sources":["components/Cart/CartItem.module.css","components/Shop/ProductItem.module.css","components/UI/Notification.module.css","components/Cart/CartButton.module.css","components/UI/Card.module.css","components/Cart/Cart.module.css","components/Layout/MainHeader.module.css","components/Shop/Products.module.css","components/UI/Card.js","components/store/cart-slice.js","components/Cart/CartItem.js","components/Cart/Cart.js","components/store/ui-slice.js","components/Cart/CartButton.js","components/Layout/MainHeader.js","components/Layout/Layout.js","components/Shop/ProductItem.js","components/Shop/Products.js","components/UI/Notification.js","App.js","components/store/cart-actions.js","components/store/index.js","index.js"],"names":["module","exports","Card","props","className","classes","card","children","cartSlice","createSlice","name","initialState","items","totalQuantity","changed","reducers","replaceCart","state","action","payload","addItemToCart","newItem","existingItem","find","item","id","quantity","totalPrice","price","push","title","removeItemFromCart","filter","cartActions","actions","CartItem","total","dispatch","useDispatch","toFixed","itemprice","details","onClick","Cart","CartItems","useSelector","cart","map","uiSlice","cartIsVisible","notification","toggle","showNotification","status","message","uiActions","CartButton","button","badge","MainHeader","header","Layout","ProductItem","description","Products","products","Notification","specialClasses","error","success","cssClasses","isInitial","App","showCart","ui","useEffect","fetchData","fetch","response","ok","Error","json","data","cartData","sendRequest","method","body","JSON","stringify","sendCartData","Fragment","store","configureStore","reducer","ReactDOM","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.a47c30b2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CartItem_item__1zMOi\",\"details\":\"CartItem_details__2_Z3n\",\"quantity\":\"CartItem_quantity__DfEXm\",\"price\":\"CartItem_price__2Nl0j\",\"itemprice\":\"CartItem_itemprice__j9ZSt\",\"actions\":\"CartItem_actions__UwVPJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ProductItem_item__WYS0J\",\"price\":\"ProductItem_price__1GiPR\",\"actions\":\"ProductItem_actions__14Yr-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"notification\":\"Notification_notification__3D5S5\",\"error\":\"Notification_error__2ILHS\",\"success\":\"Notification_success__3Ww1I\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"CartButton_button__3nU_b\",\"badge\":\"CartButton_badge__3njqM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1m44e\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cart\":\"Cart_cart__3GqLz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"MainHeader_header__k5Wsz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"products\":\"Products_products__1PCvW\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return (\n    <section\n      className={`${classes.card} ${props.className ? props.className : ''}`}\n    >\n      {props.children}\n    </section>\n  );\n};\n\nexport default Card;\n","\nimport { createSlice } from '@reduxjs/toolkit';\n\nconst cartSlice = createSlice({\n  name: 'cart',\n  initialState: {\n    items: [],\n    totalQuantity: 0,\n    changed: false,\n  },\n  reducers: {\n    replaceCart(state, action) {\n      state.totalQuantity = action.payload.totalQuantity;\n      state.items = action.payload.items;\n    },\n    addItemToCart(state, action) {\n      const newItem = action.payload;\n      const existingItem = state.items.find((item) => item.id === newItem.id);\n      state.totalQuantity++;\n      state.changed = true;\n      if (!existingItem) {\n        state.items.push({\n          id: newItem.id,\n          price: newItem.price,\n          quantity: 1,\n          totalPrice: newItem.price,\n          name: newItem.title,\n        });\n        // this pushing is possible coz we are using redux toolkit, which will update the state in immutable way\n\n      } else {\n        existingItem.quantity++;\n        existingItem.totalPrice = existingItem.totalPrice + newItem.price;\n      }\n    },\n    removeItemFromCart(state, action) {\n      const id = action.payload;\n      const existingItem = state.items.find((item) => item.id === id);\n      state.totalQuantity--;\n      state.changed = true;\n      if (existingItem.quantity === 1) {\n        state.items = state.items.filter((item) => item.id !== id);\n      } else {\n        existingItem.quantity--;\n        existingItem.totalPrice = existingItem.totalPrice - existingItem.price;\n      }\n    },\n  },\n});\n\nexport const cartActions = cartSlice.actions;\n\nexport default cartSlice;","import classes from './CartItem.module.css';\nimport { useDispatch } from 'react-redux';\nimport { cartActions } from '../store/cart-slice';\n\nconst CartItem = (props) => {\n  const {id, title, quantity, total, price } = props.item;\n  const dispatch = useDispatch();\n\n  const removeItemHandler = ()=>{\n    dispatch(cartActions.removeItemFromCart(id))\n  }\n  const addItemHandler = ()=>{\n    dispatch(cartActions.addItemToCart({\n      id,\n      title, \n      price,\n    }))\n  }\n\n\n  return (\n    <li className={classes.item}>\n      <header>\n        <h3>{title}</h3>\n        <div className={classes.price}>\n          ${total.toFixed(2)}{' '}\n          <span className={classes.itemprice}>(${price.toFixed(2)}/item)</span>\n        </div>\n      </header>\n      <div className={classes.details}>\n        <div className={classes.quantity}>\n          x <span>{quantity}</span>\n        </div>\n        <div className={classes.actions}>\n          <button onClick={removeItemHandler}>-</button>\n          <button onClick={addItemHandler}>+</button>\n        </div>\n      </div>\n    </li>\n  );\n};\n\nexport default CartItem;\n","import Card from '../UI/Card';\nimport classes from './Cart.module.css';\nimport CartItem from './CartItem';\nimport { useSelector } from 'react-redux';\n\nconst Cart = (props) => {\n  const CartItems = useSelector(state => state.cart.items);\n  return (\n    <Card className={classes.cart}>\n      <h2>Your Shopping Cart</h2>\n      <ul>\n        { CartItems.map((item)=>{\n          return (\n            <CartItem key={item.id}\n          item={{ id:item.id, title: item.name, quantity: item.quantity, total: item.totalPrice, price: item.price }}\n        />\n          )\n        }) }\n      </ul>\n    </Card>\n  );\n};\n\nexport default Cart;\n","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst uiSlice = createSlice ({\n    name : 'ui',\n    initialState : { cartIsVisible : false, notification : null},\n    reducers :{\n        toggle (state){\n            state.cartIsVisible = !state.cartIsVisible;\n    }, \n    showNotification (state, action){\n        state.notification = {\n            status : action.payload.status,\n            title : action.payload.title, \n            message : action.payload.message,\n        }\n    }\n}\n})\n\n// // creating a action function (Thunk)\n// export const sendCartData = (cart)=>{\n//     return async (dispatch)=>{\n//         dispatch(\n//             uiActions.showNotification({\n//               status : 'pending',\n//               title : 'sending...',\n//               message : 'Sending Cart data...',\n//             })\n//           )\n//           const sendRequest = async () =>{\n//             const response = await fetch('https://react-http-6b42f-default-rtdb.firebaseio.com/cart.json', {\n//              // why PUT to override the cart every time cart items changes\n//              // method: 'POST', \n//              method: 'PUT',      \n//              body : JSON.stringify(cart),\n//            }) \n       \n//            if(!response.ok){\n//              throw new Error ('Sending Cart Data Failed');\n//            }          \n//         }\n\n//         try {\n//             // this await is from return async\n//             await sendRequest();\n//             dispatch(\n//                 uiActions.showNotification({\n//                   status : 'success',\n//                   title : 'Success !',\n//                   message : 'Send Cart data successfully ',\n//                 })\n//               )\n//         } catch (error) {\n//             dispatch(\n//                 uiActions.showNotification({\n//                   status: 'error',\n//                   title: 'Error!',\n//                   message: 'Sending cart data failed!',\n//                 })\n//               )\n//         }\n        \n//     }\n// }\n\nexport const uiActions = uiSlice.actions;\nexport default uiSlice;","import classes from './CartButton.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { uiActions } from '../store/ui-slice';\n\nconst CartButton = (props) => {\n  const dispatch = useDispatch();\n\n  const totalQuantity = useSelector(state => state.cart.totalQuantity);\n\n  const toggleCartHandler = ()=>{\n    dispatch(uiActions.toggle());\n  }\n  return (\n    <button onClick={toggleCartHandler} className={classes.button}>\n      <span>My Cart</span>\n      <span className={classes.badge}>{totalQuantity}</span>\n    </button>\n  );\n};\n\nexport default CartButton;\n","import CartButton from '../Cart/CartButton';\nimport classes from './MainHeader.module.css';\n\nconst MainHeader = (props) => {\n  return (\n    <header className={classes.header}>\n      <h1>ReduxCart</h1>\n      <nav>\n        <ul>\n          <li>\n            <CartButton />\n          </li>\n        </ul>\n      </nav>\n    </header>\n  );\n};\n\nexport default MainHeader;\n","import { Fragment } from 'react';\nimport MainHeader from './MainHeader';\n\nconst Layout = (props) => {\n  return (\n    <Fragment>\n      <MainHeader />\n      <main>{props.children}</main>\n    </Fragment>\n  );\n};\n\nexport default Layout;\n","import Card from \"../UI/Card\";\nimport classes from \"./ProductItem.module.css\";\nimport { useDispatch } from \"react-redux\";\nimport { cartActions } from \"../store/cart-slice\";\n\nconst ProductItem = (props) => {\n  const { title, price, description, id } = props;\n  const dispatch = useDispatch();\n  const addToCartHandler = () => {\n    dispatch(\n      cartActions.addItemToCart({\n        id,\n        title,\n        price,\n      })\n    )\n  };\n  return (\n    <li className={classes.item}>\n      <Card>\n        <header>\n          <h3>{title}</h3>\n          <div className={classes.price}>${price.toFixed(2)}</div>\n        </header>\n        <p>{description}</p>\n        <div className={classes.actions}>\n          <button onClick={addToCartHandler}>Add to Cart</button>\n        </div>\n      </Card>\n    </li>\n  );\n};\n\nexport default ProductItem;\n","import ProductItem from './ProductItem';\nimport classes from './Products.module.css';\n\nconst Products = (props) => {\n  const DUMMY_ITEMS = [\n    {\n      id : '1', \n      price : 6,\n      title : 'First Book', \n      description : 'my first book lol 1',\n    },\n    {\n      id : '2', \n      price : 4,\n      title : 'Second Book', \n      description : 'my seoncd book lol 2',\n    }\n  ]\n  return (\n    <section className={classes.products}>\n      <h2>Buy your favorite products</h2>\n      <ul>\n      { DUMMY_ITEMS.map(item => {\n        return (\n          <ProductItem\n          title= {item.title}\n          price={item.price}\n          description={item.description}\n          key = {item.id}\n          id ={item.id}\n        />\n        )\n      })}\n        \n      </ul>\n    </section>\n  );\n};\n\nexport default Products;\n","import classes from './Notification.module.css';\n\nconst Notification = (props) => {\n  let specialClasses = '';\n\n  if (props.status === 'error') {\n    specialClasses = classes.error;\n  }\n  if (props.status === 'success') {\n    specialClasses = classes.success;\n  }\n\n  const cssClasses = `${classes.notification} ${specialClasses}`;\n\n  return (\n    <section className={cssClasses}>\n      <h2>{props.title}</h2>\n      <p>{props.message}</p>\n    </section>\n  );\n};\n\nexport default Notification;","import Cart from './components/Cart/Cart';\nimport Layout from './components/Layout/Layout';\nimport Products from './components/Shop/Products';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { uiActions } from './components/store/ui-slice';\nimport React from 'react'\nimport Notification from './components/UI/Notification'\nimport { sendCartData, fetchCartData } from './components/store/cart-actions';\n\nlet isInitial = true;\nfunction App() {\n  const showCart = useSelector((state)=>state.ui.cartIsVisible)\n  const cart = useSelector((state)=> state.cart);\n  const notification = useSelector((state) => state.ui.notification)\n\n  const dispatch = useDispatch();\n\n  useEffect(()=>{\n    dispatch(fetchCartData());\n  }, [dispatch])\n\n  useEffect(() => {\n        // dispatch(\n    //       uiActions.showNotification({\n    //         status : 'pending',\n    //         title : 'sending...',\n    //         message : 'Sending Cart data...',\n    //       })\n    //     )\n\n    // const sendCartData = async () =>{\n    //  const response = await fetch('https://react-http-6b42f-default-rtdb.firebaseio.com/cart.json', {\n    //   // why PUT to override the cart every time cart items changes\n    //   // method: 'POST', \n    //   method: 'PUT',      \n    //   body : JSON.stringify(cart),\n    // }) \n\n    // if(!response.ok){\n    //   throw new Error ('Sending Cart Data Failed');\n    // }\n    \n    // const responseData = await response.json();\n    // dispatch(\n    //   uiActions.showNotification({\n    //     status : 'success',\n    //     title : 'Success !',\n    //     message : 'Send Cart data successfully ',\n    //   })\n    // )\n\n    // }\n    // // sendCartData().catch((error) => {  where the function get called hence if (isInitial) is truthy the function sedCartDat won' be executed\n    // if (isInitial){\n    //   isInitial = false;\n    //   return;\n    // }\n    // sendCartData().catch((error) => {\n    //   dispatch(\n    //     uiActions.showNotification({\n    //       status: 'error',\n    //       title: 'Error!',\n    //       message: 'Sending cart data failed!',\n    //     })\n    //   )\n    // });\n\n    if(isInitial){\n      isInitial = false;\n      return;\n    }\n    if(cart.changed){\n       // Redux toolkit, is that it's prepared for that. It does not just accept action objects with a type property. Instead it also does accept, action creators that return functions.\n    dispatch(sendCartData(cart))\n    }\n   \n    \n  }, [cart, dispatch])\n  \n  return (\n    <React.Fragment>\n        {notification && (\n        <Notification\n          status={notification.status}\n          title={notification.title}\n          message={notification.message}\n        />\n      )}\n    <Layout>\n     { showCart && <Cart />}\n      <Products />\n    </Layout>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","\nimport { uiActions } from './ui-slice';\nimport { cartActions } from './cart-slice';\n\n// creating a action function (Thunk)\nexport const fetchCartData = () => {\n  return async (dispatch) => {\n    const fetchData = async () => {\n      const response = await fetch(\n        'https://react-http-6b42f-default-rtdb.firebaseio.com/cart.json'\n      );\n\n      if (!response.ok) {\n        throw new Error('Could not fetch cart data!');\n      }\n\n      const data = await response.json();\n\n      return data;\n    };\n\n    try {\n        // this await is from return async\n      const cartData = await fetchData();\n      dispatch(\n        cartActions.replaceCart({\n          items: cartData.items || [],\n          totalQuantity: cartData.totalQuantity,\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Fetching cart data failed!',\n        })\n      );\n    }\n  };\n};\n\n// creating a action function (Thunk)\nexport const sendCartData = (cart) => {\n  return async (dispatch) => {\n    dispatch(\n      uiActions.showNotification({\n        status: 'pending',\n        title: 'Sending...',\n        message: 'Sending cart data!',\n      })\n    );\n\n    const sendRequest = async () => {\n      const response = await fetch(\n        'https://react-http-6b42f-default-rtdb.firebaseio.com/cart.json',\n        {\n             // why PUT to override the cart every time cart items changes\n          // method: 'POST',\n          method: 'PUT',\n          body: JSON.stringify({\n            items: cart.items,\n            totalQuantity: cart.totalQuantity,\n          }),\n        }\n      );\n\n      if (!response.ok) {\n        throw new Error('Sending cart data failed.');\n      }\n    };\n\n    try {\n        // this await is from return async\n      await sendRequest();\n\n      dispatch(\n        uiActions.showNotification({\n          status: 'success',\n          title: 'Success!',\n          message: 'Sent cart data successfully!',\n        })\n      );\n    } catch (error) {\n      dispatch(\n        uiActions.showNotification({\n          status: 'error',\n          title: 'Error!',\n          message: 'Sending cart data failed!',\n        })\n      );\n    }\n  };\n}; ","import { configureStore } from \"@reduxjs/toolkit\";\nimport uiSlice from \"./ui-slice\";\nimport cartSlice from \"./cart-slice\";\n\nconst store = configureStore({\n    reducer : {ui : uiSlice.reducer, cart : cartSlice.reducer}\n});\n\nexport default store ;","import ReactDOM from 'react-dom/client';\n\nimport './index.css';\nimport App from './App';\nimport { Provider } from 'react-redux';\nimport store from './components/store/index';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(<Provider store={store}><App /></Provider> );\n"],"sourceRoot":""}